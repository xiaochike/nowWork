# _*_coding: utf-8_*_
__author__ = 'Lon'
'''
使用说明：
模块功能：本模块主要用于对公司平台上对实例进行增删改查以及对实例关系进行增删查等操作。
模块使用：先实例化模块内的RequestAPI类，需要在创建时传入平台信息，然后调用相关操作函数，此时需要传入符合格式的参数ids列表
ids列表里元素的格式：上下级的id用"."号相连接；
                     无需附加数据的则元素为id字符串：
                           ids=['objectId1.instanceId1','objectId2.instanceId2']
                     需要附加数据的则元素为字典，将id串设为键，附加数据设为值：
                           ids=['objectId1.instanceId1':{'k1':'v1'},'objectId2.instanceId2':{'k2':'v2'}]
                     单个操作直接使用字符串或字典，无需弄成列表
'''
import requests
import logging
import sys

'''
以下为设置日志步骤：建立日志-建立输出方式-建立输出格式
'''
#首先创建日志类（赋予名字为_name_）
logger = logging.getLogger(__name__)
#控制以下日志输出等级为debug
logger.setLevel(logging.DEBUG)
#建立输出方式，首先创建一个handler，用于控制日志的输出（到控制台/文件）
logger_handler = logging.StreamHandler(stream=sys.stdout)
#设置等级
logger_handler.setLevel(logging.DEBUG)
#建立输出格式
formatter = logging.Formatter('[%(asctime)s] [%(levelname)s] [%(lineno)d] %(message)s', '%Y-%m-%d %H:%M:%S')
#绑定输出格式
logger_handler.setFormatter(formatter)
#绑定输出方式
logger.addHandler(logger_handler)
logger.debug('日志启动成功！')

'''
设置编码格式
'''
reload(sys)
sys.setdefaultencoding('utf8')
logger.debug('设置编码成功！')

'''
操作类
'''
class RequestAPI(object):

    def __init__(self,ip,org, user = 'easyops', host = 'cmdb.easyops-only.com'):
        '''
        构造函数
        :param ip: 平台的ip
        :param org: 平台的端口号
        :param host: 平台的主域名
        :param user: 平台的用户名
        '''
        self.ip=ip
        self.org=org
        self.host=host
        self.user=user
        logger.debug('RequestAPI类初始化操作类成功！')

    def __init_request(self,operation_url,params=None,method='get',json=False):
        '''
        请求函数
        :param operation_url:请求操作接口的url
        :param method: 请求的方法
        :param params: 请求操作附带的信息
        :return: 返回响应信息
        '''
        url = 'http://'+self.ip+operation_url
        headers = {
            'host': self.host,
            'content-type': 'application/json',
            'user': self.user,
            'org': self.org
        }
        print url
        print params
        if json:
            response = requests.request(method=method, url=url, headers=headers, json=params)
        else:
            response = requests.request(method=method, url=url, headers=headers, params=params)
        logger.debug(url + '的请求返回信息成功！')
        return response

    def instanceQuery(self,ids):
        '''
        实例查询函数
        示例：
             debug = RequestAPI(ip = '10.2.148.180', org = '3051')
             ids = ['lon.5c05f633744b2', 'lon.5c06180e5a4f9']
             #ids = 'lon.5c05f633744b2'
             message = debug.instanceQuery(ids=ids)
             print message
        :param ids: 为一个包含模型id和实例id的字符串列表或字符串，为列表里所有字符串对应的实例进行操作
        :return: 返回查询成功和失败的信息，分别存于字典s_response和字典f_response中，可通过模型id和实例id取出对应返回值
        '''
        s_responses={}
        f_responses={}
        ids_ = []
        if isinstance(ids, str):
            ids_.append(ids)
        else:
            ids_ = ids
        for id in ids_:
            id_=id.split('.')
            operation_url='/object/'+id_[0] +'/instance/'+ id_[1]
            response=self.__init_request(operation_url=operation_url)
            response = response.json()
            if response['message'] == 'Success':
                s_responses[id] = response['data']
                logger.debug(id + "的查询操作成功！")
            else:
                f_responses[id] = 'failed!  message:' + str(response['message']) + '  code:' + str(response['code'])
                logger.debug(id + "的查询操作失败！")
        return s_responses, f_responses

    def instanceCreate(self,ids):
        '''
        实例创建函数
        示例：
             debug = RequestAPI(ip='10.2.148.180', org='3051')
             #ids= [{'lon': {'name': 'lon31'}},{'lon': {'name': 'lon41'}}]
             ids = {'lon': {'name': 'lon31'}}
             print debug.instanceCreate(ids)
        :param ids:为一个包含模型id和实例属性的字典列表或字典，为列表里所有字典对应的实例进行操作
        return:返回失败的字典
        '''
        ids_ = []
        if isinstance(ids, dict):
            ids_.append(ids)
        else:
            ids_ = ids
        f_responses = {}
        for id in ids_:
            for objectId,param in id.items():
                operation_url='/object/'+objectId+'/instance'
                response=self.__init_request(operation_url=operation_url,method='post',params=param,json=True)
                response = response.json()
                if response['message']!='Success':
                    logger.debug(objectId+str(param)+'的新建操作失败！message为：' + str(response['message']) + ' code为：' + str(response['code']))
                    f_responses[objectId+str(param)] = 'failed!  message:' + str(response['message']) + '  code:' + str(response['code'])
                else:
                    logger.debug(objectId+str(param)+"的新建操作成功！")
        return f_responses

    def instanceDelete(self,ids):
        '''
        实例删除函数
        示例：
            debug = RequestAPI(ip='10.2.148.180', org='3051')
            ids = 'lon.5c06181d6222f'
            #ids = ['lon.5c05f633744b2', 'lon.5c06180e5a4f9']
            message = debug.instanceDelete(ids)
            print message
        :param ids:为一个包含模型id和实例id的字符串列表或字符串，为列表里所有字典对应的字符串进行操作
        return:返回失败的信息字典
        '''
        ids_ = []
        if isinstance(ids, str):
            ids_.append(ids)
        else:
            ids_ = ids
        f_responses = {}
        for id in ids_:
            id_=id.split('.')
            operation_url = '/object/' + id_[0] + '/instance/' + id_[1]
            response = self.__init_request(operation_url=operation_url, method='delete')
            response = response.json()
            if response['message'] != 'Success':
                f_responses[id] =  'failed!  message:' + str(response['message']) + '  code:' + str(response['code'])
                logger.debug(id + '的删除操作失败！message为：' + str(response['message']) + ' code为：' + str(
                    response['code']))
            else:
                logger.debug(id + "的删除操作成功！")
        return f_responses

    def instanceChange(self,ids):
        '''
        实例修改函数
        示例：
             debug = RequestAPI(ip='10.2.148.180', org='3051')
             # ids= {'lon.5c062b6458c27': {'name': 'pppp'}}
             ids = [{'lon.5c062b6458c27': {'name': 'pppp'}},{'lon.5c062df31ce86': {'name': 'qqqq'}}]
             message = debug.instanceChange(ids)
             print message
        :param ids:为一个包含模型id、实例id和实例属性的字典列表或字典，为列表里所有字典对应的实例进行操作
        return:返回失败的信息字典
        '''
        ids_ = []
        if isinstance(ids, dict):
            ids_.append(ids)
        else:
            ids_ = ids
        f_responses = {}
        for message in ids_:
            for id, param in message.items():
                id_ = id.split('.')
                print id_
                operation_url = '/object/' + id_[0] + '/instance/' + id_[1]
                response = self.__init_request(operation_url=operation_url, method='put', params=param, json=True)
                response = response.json()
                if response['message']!='Success':
                    f_responses[id] = 'failed!  message:' + str(response['message']) + '  code:' + str(response['code'])
                    logger.debug(id + '的修改操作失败！message为：' + str(response['message']) + ' code为：' + str(
                        response['code']))
                else:
                    logger.debug(id + "的修改操作成功！")
        return f_responses

    def modelQuery(self,ids):
        '''
        模型查询函数
        示例：
             debug = RequestAPI(ip='10.2.148.180', org='3051')
             # ids= 'lon'
             ids = ['lon']
             message = debug.modelQuery(ids)
             print message
        :param ids: 模型id字符串或其列表
        :return: 操作出错信息和成功模型的属性的信息字典
        '''
        ids_ = []
        if isinstance(ids, str):
            ids_.append(ids)
        else:
            ids_ = ids
        f_responses = {}
        s_responses = {}
        for id in ids_:
            operation_url = '/object/' + id
            response = self.__init_request(operation_url=operation_url)
            response = response.json()
            if response['message'] != 'Success':
                f_responses[id] = 'failed!  message:' + str(response['message']) + '  code:' + str(response['code'])
                logger.debug(id + '的修改操作失败！message为：' + str(response['message']) + ' code为：' + str(
                    response['code']))
            else:
                s_responses[id] = response['data']
                logger.debug(id + "的修改操作成功！")
        return s_responses, f_responses

    def modelCreate(self,ids):
        '''
            模型查询函数
            示例：
                debug = RequestAPI(ip='10.2.148.180', org='3051')
                # ids= {'objectId':'lon2'}
                ids = [{'objectId':'lon2'},{'objectId':'lon3'}]
                message = debug.modelCreate(ids)
                print message
            :param ids: 模型id字符串或其列表
            :return: 操作出错信息和成功模型的属性的信息字典
        '''
        ids_ = []
        if isinstance(ids, dict):
            ids_.append(ids)
        else:
            ids_ = ids
        f_responses = {}
        for id in ids_:
            operation_url = '/object/'
            response = self.__init_request(operation_url=operation_url, method='post', params= id, json= True)
            response = response.json()
            if response['message'] != 'Success':
                f_responses[str(id)] = 'failed!  message:' + str(response['message']) + '  code:' + str(response['code'])
                logger.debug(str(id) + '的修改操作失败！message为：' + str(response['message']) + ' code为：' + str(
                    response['code']))
            else:
                logger.debug(str(id) + "的修改操作成功！")
        return f_responses

    def modelDelete(self,ids):
        '''
               模型删除函数
               示例：
                   debug = RequestAPI(ip='10.2.148.180', org='3051')
                   ids = 'lon2'
                   #ids = ['lon', 'lon2']
                   message = debug.modelDelete(ids)
                   print message
               :param ids:为一个包含模型id的字符串列表或字符串，为列表里所有字符串进行操作
               return:返回失败的信息字典
        '''
        ids_ = []
        if isinstance(ids, str):
            ids_.append(ids)
        else:
            ids_ = ids
        f_responses = {}
        for id in ids_:
            operation_url = '/object/' + id
            response = self.__init_request(operation_url=operation_url, method='delete')
            response = response.json()
            if response['message'] != 'Success':
                f_responses[id] = 'failed!  message:' + str(response['message']) + '  code:' + str(response['code'])
                logger.debug(id + '的删除操作失败！message为：' + str(response['message']) + ' code为：' + str(
                    response['code']))
            else:
                logger.debug(id + "的删除操作成功！")
        return f_responses


'''
调试程序部分,将示例复制至pass处可以调试相应函数功能
'''
if __name__ == '__main__':
    
    pass
